<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name/>
 <menu-path>siepic_menu.end</menu-path>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>import pya

def export_for_fabrication():
 
    extra = "static" # what to append at the end of the filename.
  
    from SiEPIC import _globals
    from SiEPIC.utils import get_layout_variables
    TECHNOLOGY, lv, ly, topcell = get_layout_variables()

    # Save the layout prior to exporting, if there are changes.
    mw = pya.Application.instance().main_window()
    if mw.manager().has_undo():
        mw.cm_save()
    layout_filename = mw.current_view().active_cellview().filename()

    if len(layout_filename) == 0:
        raise Exception("Please save your layout before exporting.")
   
    # check if the currently selected cell is a top cell
    if topcell in ly.top_cells():
#    if topcell.name in [n.name for n in ly.top_cells()]:
        if len(ly.top_cells()) &gt; 1:
            print(' - Warning: You may only have one top cell in your hierarchy. Clean up using SiEPIC &gt; Layout &gt; Delete Extra Top Cells.')
            print(' - Warning: Exporting top cell: %s' % topcell.name)
    else:
        if len(ly.top_cells()) == 1:
            # choose the single top cell for export
            topcell = ly.top_cells()[0]
        else:
            raise Exception("You may only have one top cell in your hierarchy. \nClean up using SiEPIC &gt; Layout &gt; Delete Extra Top Cells. \nOr, select the desired top cell using Show as New Top.")
        
        
    flag_longcellnames = True
    for i in range(0,ly.cells()):
        cell = ly.cell(i)
        print(" - cell: %s" % cell.name)
        if len(cell.name)&gt;64:
            # mark this layout as containing long cells names, to deal with during save
            flag_longcellnames = True


    # Save the layout, without PCell info, for fabrication
    save_options = pya.SaveLayoutOptions()

    # remove $$$CONTEXT_INFO$$$ PCells
    save_options.write_context_info=False  

    # file format
    if flag_longcellnames:
        # GDS save option allows for a max cell name
        save_options.format='GDS2'
        save_options.gds2_no_zero_length_paths = True
        save_options.gds2_max_cellname_length = 64
        save_options.gds2_write_cell_properties = False
        save_options.gds2_write_file_properties = False
    else:
        save_options.format='OASIS' # smaller file size
        save_options.oasis_compression_level = 10
        save_options.oasis_permissive = True
        save_options.oasis_recompress = True
        save_options.oasis_substitution_char = "-"

    if SiEPIC.__version__ &lt; '0.3.73':
        pya.MessageBox.warning("Errors", "Please upgrade to SiEPIC-Tools version 0.3.73 or greater.", pya.MessageBox.Ok)
    else:
        ly.cell_character_replacement(forbidden_cell_characters = '=', replacement_cell_character = '_')


    # filename
    file_out = os.path.join(os.path.dirname(layout_filename), os.path.splitext(os.path.basename(layout_filename))[0]+'_%s.'%extra+save_options.format[0:3].lower())
    print("saving output %s: %s" % (save_options.format, file_out) )

    try:
        ly.write(file_out,save_options)
    except:
        raise Exception("Problem exporting your layout.")
 
    pya.MessageBox.warning("Success.", "Layout exported successfully: \n%s" %file_out, pya.MessageBox.Ok)

export_for_fabrication()</text>
</klayout-macro>
