<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>true</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text># Python script

"""
This file is part of the SiEPICfab_Shuksan_PDK
by Lukas Chrostowski, Mustafa Hammood, Jaspreet Jhoja (c) 2021

This Python file implements a library called "SiEPICfab_Shuksan_Library", consisting of mature components that 
have Layouts and Compact Models for circuit simulations:
 - Fixed GDS cell components
 - PCells

NOTE: after changing the code, the macro needs to be rerun to install the new
implementation. The macro is also set to "auto run" to install the PCell 
when KLayout is run.

"""


print('SiEPICfab_Shuksan_Library')

import pya
from pya import *
from SiEPIC.utils import get_technology_by_name
import os
import pathlib
import sys

dir_path = os.path.dirname(os.path.realpath(__file__))
if dir_path not in sys.path:
    sys.path.append(dir_path)

files = [f for f in os.listdir(os.path.join(os.path.dirname(
    os.path.realpath(__file__)),'pcells_shuksan')) if '.py' in pathlib.Path(f).suffixes  and '__init__' not in f]
import pcells_shuksan ### folder name ###
import importlib
importlib.invalidate_caches()
pcells_=[]
for f in files:
    module = 'pcells_shuksan.%s' % f.replace('.py','')  ### folder name ###
    print(' - found module: %s' % module)
    m = importlib.import_module(module) 
    print(m)
    pcells_.append(importlib.reload(m))


class SiEPICfab_Shuksan_Library(Library):
  """
  The library where we will put the PCells and GDS into 
  """

  def __init__(self):
  
    tech_name = 'SiEPICfab_Shuksan_PDK'
    library = tech_name
    self.technology=tech_name

    print("Initializing '%s' Library." % library)

    # Set the description
    self.description = "v0.1.3, Components with models"

    # Save the path, used for loading WAVEGUIDES.XML
    import os
    self.path = os.path.dirname(os.path.realpath(__file__))
                
    # Import all the GDS files from the tech folder
    import os, fnmatch
    dir_path = os.path.normpath(os.path.join(os.path.dirname(os.path.realpath(__file__)), "../gds/mature"))
    search_str = '*' + '.oas'
    for root, dirnames, filenames in os.walk(dir_path, followlinks=True):
        for filename in fnmatch.filter([f.lower() for f in filenames], search_str):
            file1=os.path.join(root, filename)
            print(" - reading %s" % file1 )
            self.layout().read(file1)
    search_str = '*' + '.gds'
    for root, dirnames, filenames in os.walk(dir_path, followlinks=True):
        for filename in fnmatch.filter([f.lower() for f in filenames], search_str):
            file1=os.path.join(root, filename)
            print(" - reading %s" % file1 )
            self.layout().read(file1)
        
    # Create the PCell declarations
    for m in pcells_:
        mm = m.__name__.replace('pcells_shuksan.','')
        mm2 = m.__name__+'.'+mm+'()'
        print(' - register_pcell %s, %s' % (mm,mm2))
        self.layout().register_pcell(mm, eval(mm2))
                
    print(' done with pcells')
    
    # Register us the library with the technology name
    # If a library with that name already existed, it will be replaced then.
    self.register(library)

 
# Instantiate and register the library
SiEPICfab_Shuksan_Library()
</text>
</klayout-macro>
